devtools::document()
devtools::document()
devtools::document()
setwd("D:\\01_树莓泛基因组课题\\04_代表性物种")
dist<-read.table("p_dis.mat",sep = "\t",header = F,row.names = 1)
colnames(dist)<-rownames(dist)
rownames(dist)[256]<-"SHUANG2-1-6-1"
colnames(dist)[256]<-"SHUANG2-1-6-1"
rownames(dist)[236]<-"HuangPao-yunnan"
colnames(dist)[236]<-"HuangPao-yunnan"
colnames(dist)[259]<-"SJHongSM-YN"
rownames(dist)[259]<-"SJHongSM-YN"
colnames(dist)[234]<-"HanMei-Zhou"
rownames(dist)[234]<-"HanMei-Zhou"
colnames(dist)[260]<-"ShanMei-Zhou"
rownames(dist)[260]<-"ShanMei-Zhou"
colnames(dist)<- gsub(" ", "", colnames(dist))
rownames(dist)<- gsub(" ", "", rownames(dist))
cluster<-read.csv("admixture-10_info.csv",fileEncoding = "gbk")
score<-data.frame(
sample=cluster$X,
score=0
)
for (i in unique(cluster$Cluster)) {
cluster_samples<-cluster[cluster$Cluster==i,"X"]
for (j in cluster_samples) {
score_inter=sqrt(sum(as.numeric(dist[j,cluster_samples])^2))
score_intra=sqrt(sum(as.numeric(dist[j,cluster[cluster$Cluster!=i,"X"]]^2)))
score_tmp=score_intra*10+score_inter/(length(cluster_samples)-1)
score[score$sample==j,"score"]<-score_tmp
}
}
score$cluster<-cluster[match(score$sample,cluster$X),"Cluster"]
score$clade<-cluster[match(score$sample,cluster$X),"Clade"]
info<-read.csv("Pan-genome samples_20240922.csv",encoding = "GBK")
info<-read.csv("Pan-genome samples_20240922.csv",fileEncoding = "GBK")
score$longitude<-info[match(score$sample,info$Simple.ID),"Longitude"]
score$latitude<-info[match(score$sample,info$Simple.ID),"Latitude"]
score$site<-info[match(score$sample,info$Simple.ID),"取样地点"]
score$province<-str_sub(score$site,1,2)
library(stringr)
score$province<-str_sub(score$site,1,2)
score$province
View(score)
library(prs)
prselect(score[c(1,2)])
prselect(score[c(1,2)],10)
prselect(score[c(1,2,4)],10)
prselect(score[c(1,4,2)],10)
data("dist_matrix")
data("sample_matrix")
samples_score<-prscore(dist_matrix,sample_matrix)
sample_score
samples_score
prselect(score[c(1,4,2)],10)
score
score[c(1,2,4)]
prselect(score[c(1,2,4)],6)
picked_samples<-prscore(dist_matrix,sample_matrix) %>%
prselect(20)
View(picked_samples)
View(sample_matrix)
sample_df<-score[c(1,4)]
picked_samples<-prscore(dist_matrix,sample_df) %>%
prselect(20)
picked_samples<-prscore(dist_matrix,sample_matrix) %>%
prselect(100)
picked_samples<-prscore(dist_matrix,sample_df) %>%
prselect(100)
picked_samples<-prscore(dist_matrix,sample_df) %>%
prselect(200)
View(sample_df)
smc_1<-""
smc_3<-""
smc_3<-"Clade3:"
for (i in sample_df[sample_df$clade=="Clade3","sample"]) {
smc_3<-paste0(smc_3,i)
}
smc_3
for (i in sample_df[sample_df$clade=="Clade3","sample"]) {
smc_3<-paste0(smc_3,i,",")
}
smc_3<-"Clade3:"
for (i in sample_df[sample_df$clade=="Clade3","sample"]) {
smc_3<-paste0(smc_3,i,",")
}
smc_3
smc_1<-"Clade1:"
for (i in sample_df[sample_df$clade=="Clade1","sample"]) {
smc_1<-paste0(smc_1,i,",")
}
smc_1
smc_2<-"Clade2:"
for (i in sample_df[sample_df$clade=="Clade2","sample"]) {
smc_2<-paste0(smc_2,i,",")
}
smc_2
smc_4<-"Clade4:"
for (i in sample_df[sample_df$clade=="Clade4","sample"]) {
smc_4<-paste0(smc_4,i,",")
}
smc_4
View(score)
setwd("D:\\01_树莓泛基因组课题\\04_代表性物种")
dist<-read.table("p_dis.mat",sep = "\t",header = F,row.names = 1)
colnames(dist)<-rownames(dist)
rownames(dist)[256]<-"SHUANG2-1-6-1"
colnames(dist)[256]<-"SHUANG2-1-6-1"
rownames(dist)[236]<-"HuangPao-yunnan"
colnames(dist)[236]<-"HuangPao-yunnan"
colnames(dist)[259]<-"SJHongSM-YN"
rownames(dist)[259]<-"SJHongSM-YN"
colnames(dist)[234]<-"HanMei-Zhou"
rownames(dist)[234]<-"HanMei-Zhou"
colnames(dist)[260]<-"ShanMei-Zhou"
rownames(dist)[260]<-"ShanMei-Zhou"
colnames(dist)<- gsub(" ", "", colnames(dist))
rownames(dist)<- gsub(" ", "", rownames(dist))
cluster<-read.csv("admixture-10_info.csv",fileEncoding = "gbk")
score<-data.frame(
sample=cluster$X,
score=0
)
for (i in unique(cluster$Cluster)) {
cluster_samples<-cluster[cluster$Cluster==i,"X"]
for (j in cluster_samples) {
score_inter=sqrt(sum(as.numeric(dist[j,cluster_samples])^2))
score_intra=sqrt(sum(as.numeric(dist[j,cluster[cluster$Cluster!=i,"X"]]^2)))
score_tmp=score_intra*10+score_inter/(length(cluster_samples)-1)
score[score$sample==j,"score"]<-score_tmp
}
}
score$cluster<-cluster[match(score$sample,cluster$X),"Cluster"]
score$clade<-cluster[match(score$sample,cluster$X),"Clade"]
cluster
View(cluster)
cluster<-read.csv("admixture-10_info.csv",fileEncoding = "gbk")
cluster<-read.csv("admixture-10_info.csv",fileEncoding = "gbk")
cluster
table(cluster$Clade,cluster$X)
table(cluster$Clade,cluster$经纬度)
View(clluster)
View(cluster)
table(cluster$Clade,cluster$X.1)
library(REmap)
library(baidumap)
library(devtools)
install_github('badbye/baidumap')
library(devtools)
install_github('lchiffon/REmap')
mapNames("china")
library(REmap)#导入REmap包
library(baidumap)#导入baidumap包
mapNames("china")
province<-read.csv(""C:\\Users\\Administrator\\Desktop\\province.csv"")
province<-read.csv("C:\\Users\\Administrator\\Desktop\\province.csv")
province
mapNames("china")
province<-read.csv("C:\\Users\\Administrator\\Desktop\\province.csv")
table(province$省份)
input<-as.data.frame(province$省份)
input
input<-as.data.frame(table(province$省份))
input
remapC(input,color=c("white","red"),title="全国悬钩子属样本收集")
province<-read.csv("C:\\Users\\Administrator\\Desktop\\province.csv",fileEncoding = "GBK")
province
province<-read.csv("C:\\Users\\Administrator\\Desktop\\province.csv",encoding = "GBK")
province
province<-read.csv("C:\\Users\\Administrator\\Desktop\\province.csv")
province<-read.csv("C:\\Users\\Administrator\\Desktop\\province.csv")
province<-read.csv("C:\\Users\\Administrator\\Desktop\\province.csv",encoding = "GBK")
province<-read.csv("C:\\Users\\Administrator\\Desktop\\province.csv",fileEncoding = "GBK")
library(GGally)
install.packages("GGally")
library(GGally)
ggpairs(iris)
data<-read.csv("C:\\Users\\Administrator\\Desktop\\framingham.csv")
View(data)
ggpairs(data)
range(data$CIGPDAY)
data<-na.omit(data)
range(data$CIGPDAY)
library(GGally)
data<-read.csv("C:\\Users\\Administrator\\Desktop\\framingham.csv")
data$SEX<-as.factor(data$SEX)
data$AGE<-as.factor(data$AGE)
data$SYSBP<-as.factor(data$SYSBP)
data$CIGPDAY<-as.factor(data$CIGPDAY)
data$BMI<-as.factor(data$BMI)
data$EDUC<-as.factor(data$EDUC)
data<-na.omit(data)
data$BMI<-log(data$BMI)
library(GGally)
data<-read.csv("C:\\Users\\Administrator\\Desktop\\framingham.csv")
data$SEX<-as.factor(data$SEX)
data$EDUC<-as.factor(data$EDUC)
data<-na.omit(data)
data$BMI<-log(data$BMI)
data$CIGPDAY<-log(data$CIGPDAY+1) #因为range(data$CIGPDAY)最小值是0，不加1出现无穷小
ggpairs(data)
x<-ggpairs(data)
x
x$gg
x$data
x$title
x$xAxisLabels
rm(list = ls())
library(GGally)
data<-read.csv("C:\\Users\\Administrator\\Desktop\\framingham.csv")
data$SEX<-as.factor(data$SEX)
data$EDUC<-as.factor(data$EDUC)
data<-na.omit(data)
data$BMI<-log(data$BMI)
data$CIGPDAY<-log(data$CIGPDAY+1) #因为range(data$CIGPDAY)最小值是0，不加1出现无穷小
ggpairs(data)
#Q3:
fisher.test(data$SEX, data$EDUC, simulate.p.value = TRUE)
#Q4
library(ggdag)
install.packages("ggdag")
#Q4
library(ggdag)
ibrary(flextable)
library(flextable)
install.packages("flextable")
library(flextable)
library(broom) # Provides tidy() which puts the anova result in a data frame
# Construct the table
numericvars <- c('AGE','SYSBP','CIGPDAY','BMI')
table1 <- lapply(numericvars, function(x) {
position <- which(numericvars==x)
if (position < length(numericvars)) {
lapply(numericvars[-(1:position)], function(y) {
forml <- paste(x, "~", y)
# "dc" contains the data filtered for complete cases
anova(lm(forml, dc)) |>
tidy() |>
filter(row_number()==1) |>
mutate(formula = forml)
}) |> bind_rows()
}
}) |> bind_rows()
library(flextable)
library(broom) # Provides tidy() which puts the anova result in a data frame
# Construct the table
numericvars <- c('AGE','SYSBP','CIGPDAY','BMI')
table1 <- lapply(numericvars, function(x) {
position <- which(numericvars==x)
if (position < length(numericvars)) {
lapply(numericvars[-(1:position)], function(y) {
forml <- paste(x, "~", y)
# "dc" contains the data filtered for complete cases
anova(lm(forml, dc)) |>
tidy() |>
filter(row_number()==1) |>
mutate(formula = forml)
}) |> bind_rows()
}
}) |> bind_rows()
library(flextable)
library(broom) # Provides tidy() which puts the anova result in a data frame
# Construct the table
numericvars <- c('AGE','SYSBP','CIGPDAY','BMI')
table1 <- lapply(numericvars, function(x) {
position <- which(numericvars==x)
if (position < length(numericvars)) {
lapply(numericvars[-(1:position)], function(y) {
forml <- paste(x, "~", y)
# "dc" contains the data filtered for complete cases
anova(lm(forml, dc)) |>
tidy() |>
filter(row_number()==1) |>
mutate(formula = forml)
}) |> bind
library(flextable)
library(broom) # Provides tidy() which puts the anova result in a data frame
# Construct the table
numericvars <- c('AGE','SYSBP','CIGPDAY','BMI')
table1 <- lapply(numericvars, function(x) {
position <- which(numericvars==x)
if (position < length(numericvars)) {
lapply(numericvars[-(1:position)], function(y) {
forml <- paste(x, "~", y)
# "dc" contains the data filtered for complete cases
anova(lm(forml, dc)) |>
tidy() |>
filter(row_number()==1) |>
mutate(formula = forml)
}) |> bind_rows()
}
}) |> bind_rows()
library(dplyr)
library(flextable)
library(broom) # Provides tidy() which puts the anova result in a data frame
# Construct the table
numericvars <- c('AGE','SYSBP','CIGPDAY','BMI')
table1 <- lapply(numericvars, function(x) {
position <- which(numericvars==x)
if (position < length(numericvars)) {
lapply(numericvars[-(1:position)], function(y) {
forml <- paste(x, "~", y)
# "dc" contains the data filtered for complete cases
anova(lm(forml, dc)) |>
tidy() |>
filter(row_number()==1) |>
mutate(formula = forml)
}) |> bind_rows()
}
}) |> bind_rows()
library(flextable)
library(broom) # Provides tidy() which puts the anova result in a data frame
# Construct the table
numericvars <- c('AGE','SYSBP','CIGPDAY','BMI')
table1 <- lapply(numericvars, function(x) {
position <- which(numericvars==x)
if (position < length(numericvars)) {
lapply(numericvars[-(1:position)], function(y) {
forml <- paste(x, "~", y)
# "dc" contains the data filtered for complete cases
anova(lm(forml, data)) |>
tidy() |>
filter(row_number()==1) |>
mutate(formula = forml)
}) |> bind_rows()
}
}) |> bind_rows()
table1
library(flextable)
library(broom) # Provides tidy() which puts the anova result in a data frame
# Construct the table
numericvars <- c('AGE','SYSBP','CIGPDAY','BMI',"EDU")
table1 <- lapply(numericvars, function(x) {
position <- which(numericvars==x)
if (position < length(numericvars)) {
lapply(numericvars[-(1:position)], function(y) {
forml <- paste(x, "~", y)
# "dc" contains the data filtered for complete cases
anova(lm(forml, data)) |>
tidy() |>
filter(row_number()==1) |>
mutate(formula = forml)
}) |> bind_rows()
}
}) |> bind_rows()
library(flextable)
library(broom) # Provides tidy() which puts the anova result in a data frame
# Construct the table
numericvars <- c('AGE','SYSBP','CIGPDAY','BMI',"EDUC")
table1 <- lapply(numericvars, function(x) {
position <- which(numericvars==x)
if (position < length(numericvars)) {
lapply(numericvars[-(1:position)], function(y) {
forml <- paste(x, "~", y)
# "dc" contains the data filtered for complete cases
anova(lm(forml, data)) |>
tidy() |>
filter(row_number()==1) |>
mutate(formula = forml)
}) |> bind_rows()
}
}) |> bind_rows()
table1
paradox <- dagify(
AGE ~ BMI,
AGE ~ SYSBP,
AGE ~ EDUC,
CIGPDAY ~ SYSBP,
BMI ~ SYSBP
) |>  tidy_dagitty(layout = "stress")
paradox
ggdag(paradox) + theme_dag_blank()
paradox <- dagify(
BMI ~ AGE,
SYSBP ~ AGE,
EDUC~AGE,
SYSBP~CIGPDAY,
SYSBP~BMI
) |>  tidy_dagitty(layout = "stress")
ggdag(paradox) + theme_dag_blank()
